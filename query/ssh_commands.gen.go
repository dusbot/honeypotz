// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dusbot/honeypotz/model"
)

func newSSHCommand(db *gorm.DB, opts ...gen.DOOption) sSHCommand {
	_sSHCommand := sSHCommand{}

	_sSHCommand.sSHCommandDo.UseDB(db, opts...)
	_sSHCommand.sSHCommandDo.UseModel(&model.SSHCommand{})

	tableName := _sSHCommand.sSHCommandDo.TableName()
	_sSHCommand.ALL = field.NewAsterisk(tableName)
	_sSHCommand.ID = field.NewUint(tableName, "id")
	_sSHCommand.Command = field.NewString(tableName, "command")
	_sSHCommand.Response = field.NewString(tableName, "response")

	_sSHCommand.fillFieldMap()

	return _sSHCommand
}

type sSHCommand struct {
	sSHCommandDo

	ALL      field.Asterisk
	ID       field.Uint
	Command  field.String
	Response field.String

	fieldMap map[string]field.Expr
}

func (s sSHCommand) Table(newTableName string) *sSHCommand {
	s.sSHCommandDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sSHCommand) As(alias string) *sSHCommand {
	s.sSHCommandDo.DO = *(s.sSHCommandDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sSHCommand) updateTableName(table string) *sSHCommand {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.Command = field.NewString(table, "command")
	s.Response = field.NewString(table, "response")

	s.fillFieldMap()

	return s
}

func (s *sSHCommand) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sSHCommand) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["command"] = s.Command
	s.fieldMap["response"] = s.Response
}

func (s sSHCommand) clone(db *gorm.DB) sSHCommand {
	s.sSHCommandDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sSHCommand) replaceDB(db *gorm.DB) sSHCommand {
	s.sSHCommandDo.ReplaceDB(db)
	return s
}

type sSHCommandDo struct{ gen.DO }

type ISSHCommandDo interface {
	gen.SubQuery
	Debug() ISSHCommandDo
	WithContext(ctx context.Context) ISSHCommandDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISSHCommandDo
	WriteDB() ISSHCommandDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISSHCommandDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISSHCommandDo
	Not(conds ...gen.Condition) ISSHCommandDo
	Or(conds ...gen.Condition) ISSHCommandDo
	Select(conds ...field.Expr) ISSHCommandDo
	Where(conds ...gen.Condition) ISSHCommandDo
	Order(conds ...field.Expr) ISSHCommandDo
	Distinct(cols ...field.Expr) ISSHCommandDo
	Omit(cols ...field.Expr) ISSHCommandDo
	Join(table schema.Tabler, on ...field.Expr) ISSHCommandDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISSHCommandDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISSHCommandDo
	Group(cols ...field.Expr) ISSHCommandDo
	Having(conds ...gen.Condition) ISSHCommandDo
	Limit(limit int) ISSHCommandDo
	Offset(offset int) ISSHCommandDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISSHCommandDo
	Unscoped() ISSHCommandDo
	Create(values ...*model.SSHCommand) error
	CreateInBatches(values []*model.SSHCommand, batchSize int) error
	Save(values ...*model.SSHCommand) error
	First() (*model.SSHCommand, error)
	Take() (*model.SSHCommand, error)
	Last() (*model.SSHCommand, error)
	Find() ([]*model.SSHCommand, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SSHCommand, err error)
	FindInBatches(result *[]*model.SSHCommand, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SSHCommand) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISSHCommandDo
	Assign(attrs ...field.AssignExpr) ISSHCommandDo
	Joins(fields ...field.RelationField) ISSHCommandDo
	Preload(fields ...field.RelationField) ISSHCommandDo
	FirstOrInit() (*model.SSHCommand, error)
	FirstOrCreate() (*model.SSHCommand, error)
	FindByPage(offset int, limit int) (result []*model.SSHCommand, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISSHCommandDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sSHCommandDo) Debug() ISSHCommandDo {
	return s.withDO(s.DO.Debug())
}

func (s sSHCommandDo) WithContext(ctx context.Context) ISSHCommandDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sSHCommandDo) ReadDB() ISSHCommandDo {
	return s.Clauses(dbresolver.Read)
}

func (s sSHCommandDo) WriteDB() ISSHCommandDo {
	return s.Clauses(dbresolver.Write)
}

func (s sSHCommandDo) Session(config *gorm.Session) ISSHCommandDo {
	return s.withDO(s.DO.Session(config))
}

func (s sSHCommandDo) Clauses(conds ...clause.Expression) ISSHCommandDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sSHCommandDo) Returning(value interface{}, columns ...string) ISSHCommandDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sSHCommandDo) Not(conds ...gen.Condition) ISSHCommandDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sSHCommandDo) Or(conds ...gen.Condition) ISSHCommandDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sSHCommandDo) Select(conds ...field.Expr) ISSHCommandDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sSHCommandDo) Where(conds ...gen.Condition) ISSHCommandDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sSHCommandDo) Order(conds ...field.Expr) ISSHCommandDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sSHCommandDo) Distinct(cols ...field.Expr) ISSHCommandDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sSHCommandDo) Omit(cols ...field.Expr) ISSHCommandDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sSHCommandDo) Join(table schema.Tabler, on ...field.Expr) ISSHCommandDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sSHCommandDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISSHCommandDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sSHCommandDo) RightJoin(table schema.Tabler, on ...field.Expr) ISSHCommandDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sSHCommandDo) Group(cols ...field.Expr) ISSHCommandDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sSHCommandDo) Having(conds ...gen.Condition) ISSHCommandDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sSHCommandDo) Limit(limit int) ISSHCommandDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sSHCommandDo) Offset(offset int) ISSHCommandDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sSHCommandDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISSHCommandDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sSHCommandDo) Unscoped() ISSHCommandDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sSHCommandDo) Create(values ...*model.SSHCommand) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sSHCommandDo) CreateInBatches(values []*model.SSHCommand, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sSHCommandDo) Save(values ...*model.SSHCommand) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sSHCommandDo) First() (*model.SSHCommand, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHCommand), nil
	}
}

func (s sSHCommandDo) Take() (*model.SSHCommand, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHCommand), nil
	}
}

func (s sSHCommandDo) Last() (*model.SSHCommand, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHCommand), nil
	}
}

func (s sSHCommandDo) Find() ([]*model.SSHCommand, error) {
	result, err := s.DO.Find()
	return result.([]*model.SSHCommand), err
}

func (s sSHCommandDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SSHCommand, err error) {
	buf := make([]*model.SSHCommand, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sSHCommandDo) FindInBatches(result *[]*model.SSHCommand, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sSHCommandDo) Attrs(attrs ...field.AssignExpr) ISSHCommandDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sSHCommandDo) Assign(attrs ...field.AssignExpr) ISSHCommandDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sSHCommandDo) Joins(fields ...field.RelationField) ISSHCommandDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sSHCommandDo) Preload(fields ...field.RelationField) ISSHCommandDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sSHCommandDo) FirstOrInit() (*model.SSHCommand, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHCommand), nil
	}
}

func (s sSHCommandDo) FirstOrCreate() (*model.SSHCommand, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHCommand), nil
	}
}

func (s sSHCommandDo) FindByPage(offset int, limit int) (result []*model.SSHCommand, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sSHCommandDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sSHCommandDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sSHCommandDo) Delete(models ...*model.SSHCommand) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sSHCommandDo) withDO(do gen.Dao) *sSHCommandDo {
	s.DO = *do.(*gen.DO)
	return s
}
