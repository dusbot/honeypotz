// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dusbot/honeypotz/model"
)

func newSSHPermission(db *gorm.DB, opts ...gen.DOOption) sSHPermission {
	_sSHPermission := sSHPermission{}

	_sSHPermission.sSHPermissionDo.UseDB(db, opts...)
	_sSHPermission.sSHPermissionDo.UseModel(&model.SSHPermission{})

	tableName := _sSHPermission.sSHPermissionDo.TableName()
	_sSHPermission.ALL = field.NewAsterisk(tableName)
	_sSHPermission.ID = field.NewUint(tableName, "id")
	_sSHPermission.UserID = field.NewUint(tableName, "user_id")
	_sSHPermission.CommandID = field.NewUint(tableName, "command_id")

	_sSHPermission.fillFieldMap()

	return _sSHPermission
}

type sSHPermission struct {
	sSHPermissionDo

	ALL       field.Asterisk
	ID        field.Uint
	UserID    field.Uint
	CommandID field.Uint

	fieldMap map[string]field.Expr
}

func (s sSHPermission) Table(newTableName string) *sSHPermission {
	s.sSHPermissionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sSHPermission) As(alias string) *sSHPermission {
	s.sSHPermissionDo.DO = *(s.sSHPermissionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sSHPermission) updateTableName(table string) *sSHPermission {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.UserID = field.NewUint(table, "user_id")
	s.CommandID = field.NewUint(table, "command_id")

	s.fillFieldMap()

	return s
}

func (s *sSHPermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sSHPermission) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["command_id"] = s.CommandID
}

func (s sSHPermission) clone(db *gorm.DB) sSHPermission {
	s.sSHPermissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sSHPermission) replaceDB(db *gorm.DB) sSHPermission {
	s.sSHPermissionDo.ReplaceDB(db)
	return s
}

type sSHPermissionDo struct{ gen.DO }

type ISSHPermissionDo interface {
	gen.SubQuery
	Debug() ISSHPermissionDo
	WithContext(ctx context.Context) ISSHPermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISSHPermissionDo
	WriteDB() ISSHPermissionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISSHPermissionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISSHPermissionDo
	Not(conds ...gen.Condition) ISSHPermissionDo
	Or(conds ...gen.Condition) ISSHPermissionDo
	Select(conds ...field.Expr) ISSHPermissionDo
	Where(conds ...gen.Condition) ISSHPermissionDo
	Order(conds ...field.Expr) ISSHPermissionDo
	Distinct(cols ...field.Expr) ISSHPermissionDo
	Omit(cols ...field.Expr) ISSHPermissionDo
	Join(table schema.Tabler, on ...field.Expr) ISSHPermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISSHPermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISSHPermissionDo
	Group(cols ...field.Expr) ISSHPermissionDo
	Having(conds ...gen.Condition) ISSHPermissionDo
	Limit(limit int) ISSHPermissionDo
	Offset(offset int) ISSHPermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISSHPermissionDo
	Unscoped() ISSHPermissionDo
	Create(values ...*model.SSHPermission) error
	CreateInBatches(values []*model.SSHPermission, batchSize int) error
	Save(values ...*model.SSHPermission) error
	First() (*model.SSHPermission, error)
	Take() (*model.SSHPermission, error)
	Last() (*model.SSHPermission, error)
	Find() ([]*model.SSHPermission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SSHPermission, err error)
	FindInBatches(result *[]*model.SSHPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SSHPermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISSHPermissionDo
	Assign(attrs ...field.AssignExpr) ISSHPermissionDo
	Joins(fields ...field.RelationField) ISSHPermissionDo
	Preload(fields ...field.RelationField) ISSHPermissionDo
	FirstOrInit() (*model.SSHPermission, error)
	FirstOrCreate() (*model.SSHPermission, error)
	FindByPage(offset int, limit int) (result []*model.SSHPermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISSHPermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sSHPermissionDo) Debug() ISSHPermissionDo {
	return s.withDO(s.DO.Debug())
}

func (s sSHPermissionDo) WithContext(ctx context.Context) ISSHPermissionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sSHPermissionDo) ReadDB() ISSHPermissionDo {
	return s.Clauses(dbresolver.Read)
}

func (s sSHPermissionDo) WriteDB() ISSHPermissionDo {
	return s.Clauses(dbresolver.Write)
}

func (s sSHPermissionDo) Session(config *gorm.Session) ISSHPermissionDo {
	return s.withDO(s.DO.Session(config))
}

func (s sSHPermissionDo) Clauses(conds ...clause.Expression) ISSHPermissionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sSHPermissionDo) Returning(value interface{}, columns ...string) ISSHPermissionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sSHPermissionDo) Not(conds ...gen.Condition) ISSHPermissionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sSHPermissionDo) Or(conds ...gen.Condition) ISSHPermissionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sSHPermissionDo) Select(conds ...field.Expr) ISSHPermissionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sSHPermissionDo) Where(conds ...gen.Condition) ISSHPermissionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sSHPermissionDo) Order(conds ...field.Expr) ISSHPermissionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sSHPermissionDo) Distinct(cols ...field.Expr) ISSHPermissionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sSHPermissionDo) Omit(cols ...field.Expr) ISSHPermissionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sSHPermissionDo) Join(table schema.Tabler, on ...field.Expr) ISSHPermissionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sSHPermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISSHPermissionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sSHPermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISSHPermissionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sSHPermissionDo) Group(cols ...field.Expr) ISSHPermissionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sSHPermissionDo) Having(conds ...gen.Condition) ISSHPermissionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sSHPermissionDo) Limit(limit int) ISSHPermissionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sSHPermissionDo) Offset(offset int) ISSHPermissionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sSHPermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISSHPermissionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sSHPermissionDo) Unscoped() ISSHPermissionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sSHPermissionDo) Create(values ...*model.SSHPermission) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sSHPermissionDo) CreateInBatches(values []*model.SSHPermission, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sSHPermissionDo) Save(values ...*model.SSHPermission) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sSHPermissionDo) First() (*model.SSHPermission, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHPermission), nil
	}
}

func (s sSHPermissionDo) Take() (*model.SSHPermission, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHPermission), nil
	}
}

func (s sSHPermissionDo) Last() (*model.SSHPermission, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHPermission), nil
	}
}

func (s sSHPermissionDo) Find() ([]*model.SSHPermission, error) {
	result, err := s.DO.Find()
	return result.([]*model.SSHPermission), err
}

func (s sSHPermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SSHPermission, err error) {
	buf := make([]*model.SSHPermission, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sSHPermissionDo) FindInBatches(result *[]*model.SSHPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sSHPermissionDo) Attrs(attrs ...field.AssignExpr) ISSHPermissionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sSHPermissionDo) Assign(attrs ...field.AssignExpr) ISSHPermissionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sSHPermissionDo) Joins(fields ...field.RelationField) ISSHPermissionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sSHPermissionDo) Preload(fields ...field.RelationField) ISSHPermissionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sSHPermissionDo) FirstOrInit() (*model.SSHPermission, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHPermission), nil
	}
}

func (s sSHPermissionDo) FirstOrCreate() (*model.SSHPermission, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHPermission), nil
	}
}

func (s sSHPermissionDo) FindByPage(offset int, limit int) (result []*model.SSHPermission, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sSHPermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sSHPermissionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sSHPermissionDo) Delete(models ...*model.SSHPermission) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sSHPermissionDo) withDO(do gen.Dao) *sSHPermissionDo {
	s.DO = *do.(*gen.DO)
	return s
}
