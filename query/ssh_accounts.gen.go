// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dusbot/honeypotz/model"
)

func newSSHAccount(db *gorm.DB, opts ...gen.DOOption) sSHAccount {
	_sSHAccount := sSHAccount{}

	_sSHAccount.sSHAccountDo.UseDB(db, opts...)
	_sSHAccount.sSHAccountDo.UseModel(&model.SSHAccount{})

	tableName := _sSHAccount.sSHAccountDo.TableName()
	_sSHAccount.ALL = field.NewAsterisk(tableName)
	_sSHAccount.ID = field.NewUint(tableName, "id")
	_sSHAccount.Username = field.NewString(tableName, "username")
	_sSHAccount.Password = field.NewString(tableName, "password")

	_sSHAccount.fillFieldMap()

	return _sSHAccount
}

type sSHAccount struct {
	sSHAccountDo

	ALL      field.Asterisk
	ID       field.Uint
	Username field.String
	Password field.String

	fieldMap map[string]field.Expr
}

func (s sSHAccount) Table(newTableName string) *sSHAccount {
	s.sSHAccountDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sSHAccount) As(alias string) *sSHAccount {
	s.sSHAccountDo.DO = *(s.sSHAccountDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sSHAccount) updateTableName(table string) *sSHAccount {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.Username = field.NewString(table, "username")
	s.Password = field.NewString(table, "password")

	s.fillFieldMap()

	return s
}

func (s *sSHAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sSHAccount) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["username"] = s.Username
	s.fieldMap["password"] = s.Password
}

func (s sSHAccount) clone(db *gorm.DB) sSHAccount {
	s.sSHAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sSHAccount) replaceDB(db *gorm.DB) sSHAccount {
	s.sSHAccountDo.ReplaceDB(db)
	return s
}

type sSHAccountDo struct{ gen.DO }

type ISSHAccountDo interface {
	gen.SubQuery
	Debug() ISSHAccountDo
	WithContext(ctx context.Context) ISSHAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISSHAccountDo
	WriteDB() ISSHAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISSHAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISSHAccountDo
	Not(conds ...gen.Condition) ISSHAccountDo
	Or(conds ...gen.Condition) ISSHAccountDo
	Select(conds ...field.Expr) ISSHAccountDo
	Where(conds ...gen.Condition) ISSHAccountDo
	Order(conds ...field.Expr) ISSHAccountDo
	Distinct(cols ...field.Expr) ISSHAccountDo
	Omit(cols ...field.Expr) ISSHAccountDo
	Join(table schema.Tabler, on ...field.Expr) ISSHAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISSHAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISSHAccountDo
	Group(cols ...field.Expr) ISSHAccountDo
	Having(conds ...gen.Condition) ISSHAccountDo
	Limit(limit int) ISSHAccountDo
	Offset(offset int) ISSHAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISSHAccountDo
	Unscoped() ISSHAccountDo
	Create(values ...*model.SSHAccount) error
	CreateInBatches(values []*model.SSHAccount, batchSize int) error
	Save(values ...*model.SSHAccount) error
	First() (*model.SSHAccount, error)
	Take() (*model.SSHAccount, error)
	Last() (*model.SSHAccount, error)
	Find() ([]*model.SSHAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SSHAccount, err error)
	FindInBatches(result *[]*model.SSHAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SSHAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISSHAccountDo
	Assign(attrs ...field.AssignExpr) ISSHAccountDo
	Joins(fields ...field.RelationField) ISSHAccountDo
	Preload(fields ...field.RelationField) ISSHAccountDo
	FirstOrInit() (*model.SSHAccount, error)
	FirstOrCreate() (*model.SSHAccount, error)
	FindByPage(offset int, limit int) (result []*model.SSHAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISSHAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sSHAccountDo) Debug() ISSHAccountDo {
	return s.withDO(s.DO.Debug())
}

func (s sSHAccountDo) WithContext(ctx context.Context) ISSHAccountDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sSHAccountDo) ReadDB() ISSHAccountDo {
	return s.Clauses(dbresolver.Read)
}

func (s sSHAccountDo) WriteDB() ISSHAccountDo {
	return s.Clauses(dbresolver.Write)
}

func (s sSHAccountDo) Session(config *gorm.Session) ISSHAccountDo {
	return s.withDO(s.DO.Session(config))
}

func (s sSHAccountDo) Clauses(conds ...clause.Expression) ISSHAccountDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sSHAccountDo) Returning(value interface{}, columns ...string) ISSHAccountDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sSHAccountDo) Not(conds ...gen.Condition) ISSHAccountDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sSHAccountDo) Or(conds ...gen.Condition) ISSHAccountDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sSHAccountDo) Select(conds ...field.Expr) ISSHAccountDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sSHAccountDo) Where(conds ...gen.Condition) ISSHAccountDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sSHAccountDo) Order(conds ...field.Expr) ISSHAccountDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sSHAccountDo) Distinct(cols ...field.Expr) ISSHAccountDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sSHAccountDo) Omit(cols ...field.Expr) ISSHAccountDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sSHAccountDo) Join(table schema.Tabler, on ...field.Expr) ISSHAccountDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sSHAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISSHAccountDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sSHAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) ISSHAccountDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sSHAccountDo) Group(cols ...field.Expr) ISSHAccountDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sSHAccountDo) Having(conds ...gen.Condition) ISSHAccountDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sSHAccountDo) Limit(limit int) ISSHAccountDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sSHAccountDo) Offset(offset int) ISSHAccountDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sSHAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISSHAccountDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sSHAccountDo) Unscoped() ISSHAccountDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sSHAccountDo) Create(values ...*model.SSHAccount) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sSHAccountDo) CreateInBatches(values []*model.SSHAccount, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sSHAccountDo) Save(values ...*model.SSHAccount) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sSHAccountDo) First() (*model.SSHAccount, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHAccount), nil
	}
}

func (s sSHAccountDo) Take() (*model.SSHAccount, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHAccount), nil
	}
}

func (s sSHAccountDo) Last() (*model.SSHAccount, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHAccount), nil
	}
}

func (s sSHAccountDo) Find() ([]*model.SSHAccount, error) {
	result, err := s.DO.Find()
	return result.([]*model.SSHAccount), err
}

func (s sSHAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SSHAccount, err error) {
	buf := make([]*model.SSHAccount, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sSHAccountDo) FindInBatches(result *[]*model.SSHAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sSHAccountDo) Attrs(attrs ...field.AssignExpr) ISSHAccountDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sSHAccountDo) Assign(attrs ...field.AssignExpr) ISSHAccountDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sSHAccountDo) Joins(fields ...field.RelationField) ISSHAccountDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sSHAccountDo) Preload(fields ...field.RelationField) ISSHAccountDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sSHAccountDo) FirstOrInit() (*model.SSHAccount, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHAccount), nil
	}
}

func (s sSHAccountDo) FirstOrCreate() (*model.SSHAccount, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SSHAccount), nil
	}
}

func (s sSHAccountDo) FindByPage(offset int, limit int) (result []*model.SSHAccount, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sSHAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sSHAccountDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sSHAccountDo) Delete(models ...*model.SSHAccount) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sSHAccountDo) withDO(do gen.Dao) *sSHAccountDo {
	s.DO = *do.(*gen.DO)
	return s
}
